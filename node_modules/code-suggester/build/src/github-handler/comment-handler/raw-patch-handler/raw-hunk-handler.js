"use strict";
// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRawSuggestionHunks = void 0;
const logger_1 = require("../../../logger");
const diff_utils_1 = require("../../diff-utils");
/**
 * Given a map where the key is the file name and the value is the
 * old content and new content of the file
 * compute the hunk for each file whose old and new contents differ.
 * Do not compute the hunk if the old content is the same as the new content.
 * The hunk list is sorted and each interval is disjoint.
 * @param {Map<string, FileDiffContent>} diffContents a map of the original file contents and the new file contents
 * @returns the hunks for each file whose old and new contents differ
 */
function getRawSuggestionHunks(diffContents) {
    const fileHunks = new Map();
    diffContents.forEach((fileDiffContent, fileName) => {
        // if identical don't calculate the hunk and continue in the loop
        if (fileDiffContent.oldContent === fileDiffContent.newContent) {
            return;
        }
        const hunks = diff_utils_1.getSuggestedHunks(fileDiffContent.oldContent, fileDiffContent.newContent);
        fileHunks.set(fileName, hunks);
    });
    logger_1.logger.info('Parsed ranges of old and new patch');
    return fileHunks;
}
exports.getRawSuggestionHunks = getRawSuggestionHunks;
//# sourceMappingURL=raw-hunk-handler.js.map