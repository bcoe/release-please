"use strict";
// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", { value: true });
exports.reviewPullRequest = void 0;
const make_review_handler_1 = require("./make-review-handler");
const logger_1 = require("../../logger");
const raw_hunk_handler_1 = require("./raw-patch-handler/raw-hunk-handler");
const remote_patch_ranges_handler_1 = require("./get-hunk-scope-handler/remote-patch-ranges-handler");
const scope_handler_1 = require("./get-hunk-scope-handler/scope-handler");
const diff_utils_1 = require("../diff-utils");
/**
 * Comment on a Pull Request
 * @param {Octokit} octokit authenticated octokit isntance
 * @param {RepoDomain} remote the Pull Request repository
 * @param {number} pullNumber the Pull Request number
 * @param {number} pageSize the number of files to comment on // TODO pagination
 * @param {Map<string, FileDiffContent>} diffContents the old and new contents of the files to suggest
 * @returns the created review's id, or null if no review was made
 */
async function reviewPullRequest(octokit, remote, pullNumber, pageSize, diffContents) {
    try {
        // get the hunks from the pull request
        const pullRequestHunks = await remote_patch_ranges_handler_1.getPullRequestHunks(octokit, remote, pullNumber, pageSize);
        // get the hunks from the suggested change
        const allSuggestedHunks = typeof diffContents === 'string'
            ? diff_utils_1.parseAllHunks(diffContents)
            : raw_hunk_handler_1.getRawSuggestionHunks(diffContents);
        // split hunks by commentable and uncommentable
        const { validHunks, invalidHunks } = scope_handler_1.partitionSuggestedHunksByScope(pullRequestHunks, allSuggestedHunks);
        // create pull request review
        const reviewNumber = await make_review_handler_1.makeInlineSuggestions(octokit, validHunks, invalidHunks, remote, pullNumber);
        return reviewNumber;
    }
    catch (err) {
        logger_1.logger.error('Failed to suggest');
        throw err;
    }
}
exports.reviewPullRequest = reviewPullRequest;
//# sourceMappingURL=index.js.map