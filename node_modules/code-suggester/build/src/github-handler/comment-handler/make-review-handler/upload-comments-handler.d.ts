import { Octokit } from '@octokit/rest';
import { Hunk, RepoDomain } from '../../../types';
/**
 * Multiline comment GitHub API parameters
 * For more information see
 * https://developer.github.com/v3/pulls/comments/#create-a-review-comment-for-a-pull-request
 */
interface MultilineComment {
    body: string;
    path: string;
    start_line: number;
    line: number;
    side: 'RIGHT' | 'LEFT';
    start_side: 'RIGHT' | 'LEFT';
}
interface SingleLineComment {
    body: string;
    path: string;
    line: number;
    side: 'RIGHT' | 'LEFT';
}
declare type Comment = SingleLineComment | MultilineComment;
/**
 * GitHub-defined type. The Octokit library/docs are probably behind since create review already
 * accept multi-line code comments. However, the API does not reflect that.
 */
export declare type PullsCreateReviewParamsComments = {
    path: string;
    position: number;
    body: string;
};
/**
 * Convert the patch suggestions into GitHub parameter objects.
 * Use this to generate review comments
 * For information see:
 * https://developer.github.com/v3/pulls/comments/#create-a-review-comment-for-a-pull-request
 * @param suggestions
 */
export declare function buildReviewComments(suggestions: Map<string, Hunk[]>): Comment[];
/**
 * Make a request to GitHub to make review comments
 * @param octokit an authenticated octokit instance
 * @param suggestions code suggestions patches
 * @param remote the repository domain
 * @param pullNumber the pull request number to make a review on
 */
export declare function makeInlineSuggestions(octokit: Octokit, suggestions: Map<string, Hunk[]>, outOfScopeSuggestions: Map<string, Hunk[]>, remote: RepoDomain, pullNumber: number): Promise<number | null>;
export {};
