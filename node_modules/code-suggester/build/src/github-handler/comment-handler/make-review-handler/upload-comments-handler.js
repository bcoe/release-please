"use strict";
// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeInlineSuggestions = exports.buildReviewComments = void 0;
const logger_1 = require("../../../logger");
const message_handler_1 = require("./message-handler");
const COMFORT_PREVIEW_HEADER = 'application/vnd.github.comfort-fade-preview+json';
/**
 * Convert the patch suggestions into GitHub parameter objects.
 * Use this to generate review comments
 * For information see:
 * https://developer.github.com/v3/pulls/comments/#create-a-review-comment-for-a-pull-request
 * @param suggestions
 */
function buildReviewComments(suggestions) {
    const fileComments = [];
    suggestions.forEach((hunks, fileName) => {
        hunks.forEach(hunk => {
            const newContent = hunk.newContent.join('\n');
            if (hunk.oldStart === hunk.oldEnd) {
                const singleComment = {
                    path: fileName,
                    body: `\`\`\`suggestion\n${newContent}\n\`\`\``,
                    line: hunk.oldEnd,
                    side: 'RIGHT',
                };
                fileComments.push(singleComment);
            }
            else {
                const comment = {
                    path: fileName,
                    body: `\`\`\`suggestion\n${newContent}\n\`\`\``,
                    start_line: hunk.oldStart,
                    line: hunk.oldEnd,
                    side: 'RIGHT',
                    start_side: 'RIGHT',
                };
                fileComments.push(comment);
            }
        });
    });
    return fileComments;
}
exports.buildReviewComments = buildReviewComments;
/**
 * Make a request to GitHub to make review comments
 * @param octokit an authenticated octokit instance
 * @param suggestions code suggestions patches
 * @param remote the repository domain
 * @param pullNumber the pull request number to make a review on
 */
async function makeInlineSuggestions(octokit, suggestions, outOfScopeSuggestions, remote, pullNumber) {
    const comments = buildReviewComments(suggestions);
    if (!comments.length) {
        logger_1.logger.info('No valid suggestions to make');
    }
    if (!comments.length && !outOfScopeSuggestions.size) {
        logger_1.logger.info('No suggestions were generated. Exiting...');
        return null;
    }
    const summaryComment = message_handler_1.buildSummaryComment(outOfScopeSuggestions);
    if (summaryComment) {
        logger_1.logger.warn('Some suggestions could not be made');
    }
    // apply the suggestions to the latest sha
    // the latest Pull Request hunk range includes
    // all previous commit valid hunk ranges
    const headSha = (await octokit.pulls.get({
        owner: remote.owner,
        repo: remote.repo,
        pull_number: pullNumber,
    })).data.head.sha;
    const reviewNumber = (await octokit.pulls.createReview({
        owner: remote.owner,
        repo: remote.repo,
        pull_number: pullNumber,
        commit_id: headSha,
        event: 'COMMENT',
        body: summaryComment,
        headers: { accept: COMFORT_PREVIEW_HEADER },
        // Octokit type definitions doesn't support mulitiline comments, but the GitHub API does
        comments: comments,
    })).data.id;
    logger_1.logger.info(`Successfully created a review on pull request: ${pullNumber}.`);
    return reviewNumber;
}
exports.makeInlineSuggestions = makeInlineSuggestions;
//# sourceMappingURL=upload-comments-handler.js.map