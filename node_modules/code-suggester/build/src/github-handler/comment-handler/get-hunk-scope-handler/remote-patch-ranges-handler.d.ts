import { Octokit } from '@octokit/rest';
import { RepoDomain, Hunk } from '../../../types';
/**
 * For a pull request, get each remote file's patch text asynchronously
 * Also get the list of files whose patch data could not be returned
 * @param {Octokit} octokit the authenticated octokit instance
 * @param {RepoDomain} remote the remote repository domain information
 * @param {number} pullNumber the pull request number
 * @param {number} pageSize the number of results to return per page
 * @returns {Promise<Object<PatchText, string[]>>} the stringified patch data for each file and the list of files whose patch data could not be resolved
 */
export declare function getCurrentPullRequestPatches(octokit: Octokit, remote: RepoDomain, pullNumber: number, pageSize: number): Promise<{
    patches: Map<string, string>;
    filesMissingPatch: string[];
}>;
/**
 * For a pull request, get each remote file's current patch range to identify the scope of each patch as a Map.
 * @param {Octokit} octokit the authenticated octokit instance
 * @param {RepoDomain} remote the remote repository domain information
 * @param {number} pullNumber the pull request number
 * @param {number} pageSize the number of files to return per pull request list files query
 * @returns {Promise<Map<string, Hunk[]>>} the scope of each file in the pull request
 */
export declare function getPullRequestHunks(octokit: Octokit, remote: RepoDomain, pullNumber: number, pageSize: number): Promise<Map<string, Hunk[]>>;
